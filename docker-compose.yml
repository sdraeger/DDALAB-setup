# DDALAB Production Docker Compose
# This is the main deployment file for DDALAB
# 
# Quick Start:
# 1. Copy .env.production.example to .env
# 2. Edit .env to change all passwords
# 3. Run: docker-compose up -d
# 4. Access: https://localhost

services:
  # Main DDALAB application (includes API + Web frontend)
  ddalab:
    image: ${DDALAB_IMAGE:-sdraeger1/ddalab:latest}
    platform: linux/amd64
    container_name: ddalab
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # Database connection
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-ddalab}
      - DB_PASSWORD=${DB_PASSWORD:-ddalab}
      - DB_NAME=${DB_NAME:-ddalab}
      # MinIO storage
      - MINIO_HOST=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      # Redis cache
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # Authentication
      - DDALAB_AUTH_MODE=${DDALAB_AUTH_MODE:-local}
      - JWT_SECRET_KEY=${DDALAB_JWT_SECRET_KEY:-CHANGE_ME_IN_PRODUCTION}
      # DDA Engine
      - DDA_BINARY_PATH=${DDALAB_DDA_BINARY_PATH:-/app/bin/run_DDA_ASCII}
      # Data directories
      - DATA_DIR=/app/data
      - ALLOWED_DIRS=/app/data
      # API routing for web20 - route through internal API port instead of external HTTPS
      - API_ORIGIN=http://0.0.0.0:8001
    volumes:
      - ./data:/app/data
      - ./.env.dev:/app/.env.dev:ro
      - ./.env:/app/.env:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    networks:
      - ddalab-network
    labels:
      # Traefik configuration for HTTPS
      - "traefik.enable=true"
      # Web30 specific CSS file
      - "traefik.http.routers.ddalab-web30-specific-css.rule=Host(`localhost`) && Path(`/_next/static/css/ff370fba21abc9eb.css`)"
      - "traefik.http.routers.ddalab-web30-specific-css.entrypoints=websecure"
      - "traefik.http.routers.ddalab-web30-specific-css.tls=true"
      - "traefik.http.routers.ddalab-web30-specific-css.priority=300"
      - "traefik.http.routers.ddalab-web30-specific-css.service=ddalab-web30"
      # Web30 assets routing via /web30-assets prefix  
      - "traefik.http.routers.ddalab-web30-assets.rule=Host(`localhost`) && PathPrefix(`/web30-assets`)"
      - "traefik.http.routers.ddalab-web30-assets.entrypoints=websecure"
      - "traefik.http.routers.ddalab-web30-assets.tls=true"
      - "traefik.http.routers.ddalab-web30-assets.priority=250"
      - "traefik.http.routers.ddalab-web30-assets.service=ddalab-web30"
      - "traefik.http.routers.ddalab-web30-assets.middlewares=web30-assets-stripprefix"
      - "traefik.http.middlewares.web30-assets-stripprefix.stripprefix.prefixes=/web30-assets"
      # Web20 specific CSS files  
      - "traefik.http.routers.ddalab-web20-specific.rule=Host(`localhost`) && (Path(`/_next/static/css/7e7d96b1e6991756.css`) || Path(`/_next/static/css/b41c600ab70004f6.css`))"
      - "traefik.http.routers.ddalab-web20-specific.entrypoints=websecure"
      - "traefik.http.routers.ddalab-web20-specific.tls=true"
      - "traefik.http.routers.ddalab-web20-specific.priority=300"
      - "traefik.http.routers.ddalab-web20-specific.service=ddalab-web20"
      # Shared CSS file - default to web20
      - "traefik.http.routers.ddalab-shared-css.rule=Host(`localhost`) && Path(`/_next/static/css/d062c0149ade33ed.css`)"
      - "traefik.http.routers.ddalab-shared-css.entrypoints=websecure"
      - "traefik.http.routers.ddalab-shared-css.tls=true"
      - "traefik.http.routers.ddalab-shared-css.priority=250"
      - "traefik.http.routers.ddalab-shared-css.service=ddalab-web20"
      # All other _next assets to web20 (JS files, fonts, etc.)
      - "traefik.http.routers.ddalab-other-assets.rule=Host(`localhost`) && PathPrefix(`/_next/`)"
      - "traefik.http.routers.ddalab-other-assets.entrypoints=websecure"
      - "traefik.http.routers.ddalab-other-assets.tls=true"
      - "traefik.http.routers.ddalab-other-assets.priority=100"
      - "traefik.http.routers.ddalab-other-assets.service=ddalab-web20"
      # Web30 page routing
      - "traefik.http.routers.ddalab-web30.rule=Host(`localhost`) && PathPrefix(`/web30`)"
      - "traefik.http.routers.ddalab-web30.entrypoints=websecure"
      - "traefik.http.routers.ddalab-web30.tls=true"  
      - "traefik.http.routers.ddalab-web30.priority=90"
      - "traefik.http.routers.ddalab-web30.service=ddalab-web30"
      - "traefik.http.routers.ddalab-web30.middlewares=web30-stripprefix"
      - "traefik.http.middlewares.web30-stripprefix.stripprefix.prefixes=/web30"
      - "traefik.http.services.ddalab-web30.loadbalancer.server.port=3001"
      # Web20 interface routing (default) - includes /api-backend for Next.js proxy
      - "traefik.http.routers.ddalab-web20.rule=Host(`localhost`) && (!PathPrefix(`/api`) || PathPrefix(`/api-backend`)) && !PathPrefix(`/docs`) && !PathPrefix(`/graphql`) && !PathPrefix(`/web30`)"
      - "traefik.http.routers.ddalab-web20.entrypoints=websecure"
      - "traefik.http.routers.ddalab-web20.tls=true"
      - "traefik.http.routers.ddalab-web20.priority=10"
      - "traefik.http.routers.ddalab-web20.service=ddalab-web20"
      - "traefik.http.services.ddalab-web20.loadbalancer.server.port=3000"
      # API routing through HTTPS - direct API endpoints only, NOT /api-backend
      - "traefik.http.routers.ddalab-api.rule=Host(`localhost`) && (PathPrefix(`/api`) && !PathPrefix(`/api-backend`) || PathPrefix(`/docs`) || PathPrefix(`/graphql`))"
      - "traefik.http.routers.ddalab-api.entrypoints=websecure"
      - "traefik.http.routers.ddalab-api.tls=true"
      - "traefik.http.routers.ddalab-api.priority=100"
      - "traefik.http.routers.ddalab-api.service=ddalab-api"
      - "traefik.http.services.ddalab-api.loadbalancer.server.port=8001"

  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: ddalab-postgres
    restart: unless-stopped
    environment:
      # Create the database and user directly
      POSTGRES_USER: ${DB_USER:-ddalab}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-ddalab}
      POSTGRES_DB: ${DB_NAME:-ddalab}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - ddalab-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-ddalab}"]
      interval: 5s
      timeout: 3s
      retries: 10

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: ddalab-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - ddalab-network

  # MinIO object storage
  minio:
    image: minio/minio:latest
    container_name: ddalab-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio-data:/data
    ports:
      - "9001:9001"  # MinIO console (optional)
    networks:
      - ddalab-network

  # Traefik reverse proxy for SSL/HTTPS
  traefik:
    image: traefik:v3.0
    container_name: ddalab-traefik
    restart: unless-stopped
    command:
      # Enable Docker provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      # Configure entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.api.address=:8001"
      # Redirect HTTP to HTTPS
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      # SSL certificates
      - "--providers.file.filename=/etc/traefik/traefik-config.yml"
      - "--providers.file.watch=true"
      # Disable dashboard for security
      - "--api.dashboard=false"
    ports:
      - "80:80"
      - "443:443"
      - "8001:8001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/etc/certs:ro
      - ./configs/traefik-config.yml:/etc/traefik/traefik-config.yml:ro
    networks:
      - ddalab-network
    depends_on:
      - ddalab

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ddalab-prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - ddalab-network
    profiles:
      - monitoring

  # Optional: Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ddalab-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_SERVER_HTTP_PORT=3005
    ports:
      - "3005:3005"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - ddalab-network
    profiles:
      - monitoring

networks:
  ddalab-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  minio-data:
  prometheus-data:
  grafana-data: